--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : E:\SpreadModel\_Databases\DBSchema3_0_79.vsd.
--    Time Created: June 01, 2006 9:26 AM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : naadsm3_0_x
--    Connected server      : ACCESS
--    Connected database    : E:\SpreadModel\_Databases\naadsm3_0_x.mdb



-- Update existing table `inProductionType`.
create table `inProductionType_IM0` ( 
	`productionTypeID` COUNTER,
	`descr` VARCHAR(255),
	`useDiseaseTransition` BIT,
	`disLatentPeriodPdfID` INTEGER,
	`disSubclinicalPeriodPdfID` INTEGER,
	`disClinicalPeriodPdfID` INTEGER,
	`disImmunePeriodPdfID` INTEGER,
	`useDetection` BIT,
	`detProbReportVsTimeClinicalRelID` INTEGER,
	`detProbReportVsFirstDetectionRelID` INTEGER,
	`survDirect` BIT,
	`survDirectSuccess` DOUBLE,
	`survDirectTracePeriod` INTEGER,
	`survIndirect` BIT,
	`survIndirectSuccess` DOUBLE,
	`survIndirectTracePeriod` INTEGER,
	`useBasicDestruction` BIT,
	`destrIsRingTrigger` BIT,
	`destrRingRadius` DOUBLE,
	`destrIsRingTarget` BIT,
	`destrDirectTraces` BIT,
	`destrIndirectTraces` BIT,
	`destrPriority` INTEGER,
	`useVaccination` BIT,
	`vaccMinTimeBetweenVaccinations` INTEGER,
	`vaccDaysToImmunity` INTEGER,
	`vaccImmunePeriodPdfID` INTEGER,
	`vaccRing` BIT,
	`vaccRingRadius` DOUBLE,
	`vaccPriority` INTEGER,
	`useCosts` BIT,
	`costDestrAppraisalPerUnit` DOUBLE,
	`costDestrCleaningPerUnit` DOUBLE,
	`costDestrEuthanasiaPerAnimal` DOUBLE,
	`costDestrIndemnificationPerAnimal` DOUBLE,
	`costDestrDisposalPerAnimal` DOUBLE,
	`costVaccSetupPerUnit` DOUBLE,
	`costVaccThreshold` INTEGER,
	`costVaccBaselinePerAnimal` DOUBLE,
	`costVaccAdditionalPerAnimal` DOUBLE); 

insert into `inProductionType_IM0` ( `descr`, `useDiseaseTransition`, `disLatentPeriodPdfID`, `disSubclinicalPeriodPdfID`, `disClinicalPeriodPdfID`, `disImmunePeriodPdfID`, `useDetection`, `detProbReportVsTimeClinicalRelID`, `detProbReportVsFirstDetectionRelID`, `survDirect`, `survDirectSuccess`, `survDirectTracePeriod`, `survIndirect`, `survIndirectSuccess`, `survIndirectTracePeriod`, `useBasicDestruction`, `destrIsRingTrigger`, `destrRingRadius`, `destrIsRingTarget`, `destrDirectTraces`, `destrIndirectTraces`, `destrPriority`, `useVaccination`, `vaccMinTimeBetweenVaccinations`, `vaccDaysToImmunity`, `vaccImmunePeriodPdfID`, `vaccRing`, `vaccRingRadius`, `vaccPriority`, `useCosts`, `costDestrAppraisalPerUnit`, `costDestrCleaningPerUnit`, `costDestrEuthanasiaPerAnimal`, `costDestrIndemnificationPerAnimal`, `costDestrDisposalPerAnimal`, `costVaccSetupPerUnit`, `costVaccThreshold`, `costVaccBaselinePerAnimal`, `costVaccAdditionalPerAnimal`) 
    select `inProductionType`.`descr`, 
           `inProductionType`.`useDiseaseTransition`, 
           `inProductionType`.`disLatentPeriodPdfID`, 
           `inProductionType`.`disSubclinicalPeriodPdfID`, 
           `inProductionType`.`disClinicalPeriodPdfID`, 
           `inProductionType`.`disImmunePeriodPdfID`, 
           `inProductionType`.`useDetection`, 
           `inProductionType`.`detProbReportVsTimeClinicalRelID`, 
           `inProductionType`.`detProbReportVsFirstDetectionRelID`, 
           `inProductionType`.`survDirect`, 
           `inProductionType`.`survDirectSuccess`, 
           `inProductionType`.`survDirectTracePeriod`, 
           `inProductionType`.`survIndirect`, 
           `inProductionType`.`survIndirectSuccess`, 
           `inProductionType`.`survIndirectTracePeriod`, 
           `inProductionType`.`useBasicDestruction`, 
           `inProductionType`.`destrIsRingTrigger`, 
           `inProductionType`.`destrRingRadius`, 
           `inProductionType`.`destrIsRingTarget`, 
           `inProductionType`.`destrDirectTraces`, 
           `inProductionType`.`destrIndirectTraces`, 
           `inProductionType`.`destrPriority`, 
           `inProductionType`.`useVaccination`, 
           `inProductionType`.`vaccMinTimeBetweenVaccinations`, 
           `inProductionType`.`vaccDaysToImmunity`, 
           `inProductionType`.`vaccImmunePeriodPdfID`, 
           `inProductionType`.`vaccRing`, 
           `inProductionType`.`vaccRingRadius`, 
           `inProductionType`.`vaccPriority`, 
           `inProductionType`.`useCosts`, 
           `inProductionType`.`costDestrAppraisalPerUnit`, 
           `inProductionType`.`costDestrCleaningPerUnit`, 
           `inProductionType`.`costDestrEuthanasiaPerAnimal`, 
           `inProductionType`.`costDestrIndemnificationPerAnimal`, 
           `inProductionType`.`costDestrDisposalPerAnimal`, 
           `inProductionType`.`costVaccSetupPerUnit`, 
           `inProductionType`.`costVaccThreshold`, 
           `inProductionType`.`costVaccBaselinePerAnimal`, 
           `inProductionType`.`costVaccAdditionalPerAnimal`  
    from `inProductionType`;


alter table `dynHerd`
	drop constraint `inProductionType_dynHerd_FK1`;


alter table `inProductionTypePair`
	drop constraint `inProductionType_inProductionTypePairs_FK1`;


alter table `inProductionTypePair`
	drop constraint `inProductionType_inProductionTypePairs_FK2`;


alter table `outDailyByProductionType`
	drop constraint `inProductionType_outDailyByProductionType_FK1`;


alter table `outIterationByProductionType`
	drop constraint `inProductionType_outIterationByProductionType_FK1`;


alter table `outEpidemicCurves`
	drop constraint `inProductionType_outEpidemicCurves_FK1`;


alter table `outIterationCosts`
	drop constraint `inProductionType_outIterationCosts_FK1`;


alter table `inProductionType`
	drop constraint `FK1`;


alter table `inProductionType`
	drop constraint `FK2`;


alter table `inProductionType`
	drop constraint `FK4`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK3`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK5`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK6`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK7`;


drop table `inProductionType`; 


-- `inProductionType` : Table of inProductionType
-- 	`productionTypeID` : A unique ID for each production type present in the scenario.
-- 	`descr` : A unique description of the production type.
-- 	`useDiseaseTransition` : Indicates whether units of this production type will undergo disease transition.
-- 	`disLatentPeriodPdfID` : ID number of the probability density function used to define the latent period for units of this production type.  This field references inChart.chartID.
-- 	`disSubclinicalPeriodPdfID` : ID number of the probability density function used to define the subclinical period for units of this production type.  This field references inChart.chartID.
-- 	`disClinicalPeriodPdfID` : ID number of the probability density function used to define the clinical period for units of this production type.  This field references inChart.chartID.
-- 	`disImmunePeriodPdfID` : ID number of the probability density function used to define the natural immune period for units of this production type.  This field references inChart.chartID.
-- 	`useDetection` : Indicates whether disease detection will be modeled for units of this production type.
-- 	`detProbObsVsTimeClinicalRelID` : ID number of the relational function used to define the probability of observing clinical signs in units of this production type.  This field references inChart.chartID.
-- 	`detProbReportVsFirstDetectionRelID` : ID number of the relational function used to define the probabilty of reporting disease in units of this production type.  This field references inChart.chartID.
-- 	`survDirect` : Indicates whether trace surveillance for direct contacts will be attempted.
-- 	`survDirectSuccess` : The probability of success of identifying direct contacts by trace surveillance.
-- 	`survDirectTracePeriod` : The period of time, in days, for which traceback surveillance of direct contacts will be attempted.
-- 	`survIndirect` : Indicates whether trace surveillance for indirect contacts will be attempted.
-- 	`survIndirectSuccess` : The probability of success of identifying indirect contacts by trace surveillance.
-- 	`survIndirectTracePeriod` : The period of time, in days, for which traceback surveillance of indirect contacts will be attempted.
-- 	`useBasicDestruction` : Indicates whether detected clinical units of this production type will be destroyed.
-- 	`destrIsRingTrigger` : Indicates whether detection of a unit of this type will trigger the formation of destruction ring.
-- 	`destrRingRadius` : Radius, in kilometers, of the destruction ring.
-- 	`destrIsRingTarget` : Indicates whether units of this type will be subject to preemptive ring destruction.
-- 	`destrDirectTraces` : Indicates whether units of this type identified by traceback of direct contacts will be subject to preemptive destruction.
-- 	`destrIndirectTraces` : Indicates whether units of this type identified by traceback of indirect contacts will be subject to preemptive destruction.
-- 	`destrPriority` : The destruction priority of this production type, relative to other production types.  A lower number indicates higher priority.
-- 	`useVaccination` : Indicates whether units of this type will be subject to vaccination.
-- 	`vaccMinTimeBetweenVaccinations` : The minimum time, in days, between vaccinations for units of this production type.
-- 	`vaccDaysToImmunity` : The number of days required for the onset of vaccine immunity in a newly vaccinated unit of this type.
-- 	`vaccImmunePeriodPdfID` : ID number of the probability density function used to define the vaccine immune period for units of this production type.  This field references inChart.chartID.
-- 	`vaccRing` : Indicates whether detection of a clinical unit of this type will trigger a vaccination ring. 
-- 	`vaccRingRadius` : Radius, in kilometers, of the vaccination ring.
-- 	`vaccPriority` : The vaccination priority of this production type, relative to other production types. A lower number indicates higher priority.
-- 	`useCosts` : Indicates whether direct costs will be tracked for units of this production type.
-- 	`costDestrAppraisalPerUnit` : The cost associated with appraisal for each destroyed unit of this type.
-- 	`costDestrCleaningPerUnit` : The cost of cleaning and disinfection for each destroyed unit of this type.
-- 	`costDestrEuthanasiaPerAnimal` : The cost of euthanizing each destroyed animal of this type.
-- 	`costDestrIndemnificationPerAnimal` : The cost of indemnification for each destroyed animal of this type.
-- 	`costDestrDisposalPerAnimal` : The cost of carcass disposal for each destroyed animal of this type.
-- 	`costVaccSetupPerUnit` : The cost of site setup for each vaccinated unit of this type.
-- 	`costVaccThreshold` : The number of animals of this type that can be vaccinated before the cost of vaccination increases.
-- 	`costVaccBaselinePerAnimal` : The baseline cost of vaccination for each vaccinated animal of this type.  This cost applies to all vaccinations before the threshold set in costVaccThreshold is met.
-- 	`costVaccAdditionalPerAnimal` : The additional cost of vaccination for each vaccinated animal of this type, after the threshold is exceeded.  
create table `inProductionType` ( 
	`productionTypeID` COUNTER,
	`descr` VARCHAR(255),
	`useDiseaseTransition` BIT,
	`disLatentPeriodPdfID` INTEGER,
	`disSubclinicalPeriodPdfID` INTEGER,
	`disClinicalPeriodPdfID` INTEGER,
	`disImmunePeriodPdfID` INTEGER,
	`useDetection` BIT,
	`detProbObsVsTimeClinicalRelID` INTEGER,
	`detProbReportVsFirstDetectionRelID` INTEGER,
	`survDirect` BIT,
	`survDirectSuccess` DOUBLE,
	`survDirectTracePeriod` INTEGER,
	`survIndirect` BIT,
	`survIndirectSuccess` DOUBLE,
	`survIndirectTracePeriod` INTEGER,
	`useBasicDestruction` BIT,
	`destrIsRingTrigger` BIT,
	`destrRingRadius` DOUBLE,
	`destrIsRingTarget` BIT,
	`destrDirectTraces` BIT,
	`destrIndirectTraces` BIT,
	`destrPriority` INTEGER,
	`useVaccination` BIT,
	`vaccMinTimeBetweenVaccinations` INTEGER,
	`vaccDaysToImmunity` INTEGER,
	`vaccImmunePeriodPdfID` INTEGER,
	`vaccRing` BIT,
	`vaccRingRadius` DOUBLE,
	`vaccPriority` INTEGER,
	`useCosts` BIT,
	`costDestrAppraisalPerUnit` DOUBLE,
	`costDestrCleaningPerUnit` DOUBLE,
	`costDestrEuthanasiaPerAnimal` DOUBLE,
	`costDestrIndemnificationPerAnimal` DOUBLE,
	`costDestrDisposalPerAnimal` DOUBLE,
	`costVaccSetupPerUnit` DOUBLE,
	`costVaccThreshold` INTEGER,
	`costVaccBaselinePerAnimal` DOUBLE,
	`costVaccAdditionalPerAnimal` DOUBLE); 

insert into `inProductionType` (`descr`, `useDiseaseTransition`, `disLatentPeriodPdfID`, `disSubclinicalPeriodPdfID`, `disClinicalPeriodPdfID`, `disImmunePeriodPdfID`, `useDetection`, `detProbObsVsTimeClinicalRelID`, `detProbReportVsFirstDetectionRelID`, `survDirect`, `survDirectSuccess`, `survDirectTracePeriod`, `survIndirect`, `survIndirectSuccess`, `survIndirectTracePeriod`, `useBasicDestruction`, `destrIsRingTrigger`, `destrRingRadius`, `destrIsRingTarget`, `destrDirectTraces`, `destrIndirectTraces`, `destrPriority`, `useVaccination`, `vaccMinTimeBetweenVaccinations`, `vaccDaysToImmunity`, `vaccImmunePeriodPdfID`, `vaccRing`, `vaccRingRadius`, `vaccPriority`, `useCosts`, `costDestrAppraisalPerUnit`, `costDestrCleaningPerUnit`, `costDestrEuthanasiaPerAnimal`, `costDestrIndemnificationPerAnimal`, `costDestrDisposalPerAnimal`, `costVaccSetupPerUnit`, `costVaccThreshold`, `costVaccBaselinePerAnimal`, `costVaccAdditionalPerAnimal`) 
    select `inProductionType_IM0`.`descr`, 
           `inProductionType_IM0`.`useDiseaseTransition`, 
           `inProductionType_IM0`.`disLatentPeriodPdfID`, 
           `inProductionType_IM0`.`disSubclinicalPeriodPdfID`, 
           `inProductionType_IM0`.`disClinicalPeriodPdfID`, 
           `inProductionType_IM0`.`disImmunePeriodPdfID`, 
           `inProductionType_IM0`.`useDetection`, 
           `inProductionType_IM0`.`detProbReportVsTimeClinicalRelID`, 
           `inProductionType_IM0`.`detProbReportVsFirstDetectionRelID`, 
           `inProductionType_IM0`.`survDirect`, 
           `inProductionType_IM0`.`survDirectSuccess`, 
           `inProductionType_IM0`.`survDirectTracePeriod`, 
           `inProductionType_IM0`.`survIndirect`, 
           `inProductionType_IM0`.`survIndirectSuccess`, 
           `inProductionType_IM0`.`survIndirectTracePeriod`, 
           `inProductionType_IM0`.`useBasicDestruction`, 
           `inProductionType_IM0`.`destrIsRingTrigger`, 
           `inProductionType_IM0`.`destrRingRadius`, 
           `inProductionType_IM0`.`destrIsRingTarget`, 
           `inProductionType_IM0`.`destrDirectTraces`, 
           `inProductionType_IM0`.`destrIndirectTraces`, 
           `inProductionType_IM0`.`destrPriority`, 
           `inProductionType_IM0`.`useVaccination`, 
           `inProductionType_IM0`.`vaccMinTimeBetweenVaccinations`, 
           `inProductionType_IM0`.`vaccDaysToImmunity`, 
           `inProductionType_IM0`.`vaccImmunePeriodPdfID`, 
           `inProductionType_IM0`.`vaccRing`, 
           `inProductionType_IM0`.`vaccRingRadius`, 
           `inProductionType_IM0`.`vaccPriority`, 
           `inProductionType_IM0`.`useCosts`, 
           `inProductionType_IM0`.`costDestrAppraisalPerUnit`, 
           `inProductionType_IM0`.`costDestrCleaningPerUnit`, 
           `inProductionType_IM0`.`costDestrEuthanasiaPerAnimal`, 
           `inProductionType_IM0`.`costDestrIndemnificationPerAnimal`, 
           `inProductionType_IM0`.`costDestrDisposalPerAnimal`, 
           `inProductionType_IM0`.`costVaccSetupPerUnit`, 
           `inProductionType_IM0`.`costVaccThreshold`, 
           `inProductionType_IM0`.`costVaccBaselinePerAnimal`, 
           `inProductionType_IM0`.`costVaccAdditionalPerAnimal`  
    from `inProductionType_IM0`;


drop table `inProductionType_IM0`; 


alter table `inProductionType`
	add constraint `inProductionType_PK` primary key (`productionTypeID`) ; 


-- Update existing table `inGeneral`.
create table `inGeneral_IM0` ( 
	`inGeneralID` VARCHAR(10),
	`scenarioDescr` LONGTEXT,
	`iterations` INTEGER,
	`days` INTEGER,
	`simStopReason` VARCHAR(25),
	`includeContactSpread` BIT,
	`includeAirborneSpread` BIT,
	`includeCosts` BIT,
	`useFixedRandomSeed` BIT,
	`randomSeed` INTEGER,
	`saveAllDailyOutputs` BIT,
	`saveDailyOutputsForIterations` INTEGER,
	`writeDailyStatesFile` BIT,
	`dailyStatesFileName` VARCHAR(255),
	`saveDailyEvents` BIT,
	`saveDailyExposures` BIT); 

insert into `inGeneral_IM0` (`inGeneralID`, `scenarioDescr`, `iterations`, `days`, `simStopReason`, `includeContactSpread`, `includeAirborneSpread`, `includeCosts`, `useFixedRandomSeed`, `randomSeed`, `saveAllDailyOutputs`, `saveDailyOutputsForIterations`, `writeDailyStatesFile`, `dailyStatesFileName`, `saveDailyEvents`, `saveDailyExposures`) 
    select `inGeneral`.`inGeneralID`, 
           `inGeneral`.`scenarioDescr`, 
           `inGeneral`.`iterations`, 
           `inGeneral`.`days`, 
           `inGeneral`.`simStopReason`, 
           `inGeneral`.`includeContactSpread`, 
           `inGeneral`.`includeAirborneSpread`, 
           `inGeneral`.`includeCosts`, 
           `inGeneral`.`useFixedRandomSeed`, 
           `inGeneral`.`randomSeed`, 
           `inGeneral`.`saveAllDailyOutputs`, 
           `inGeneral`.`saveDailyOutputsForIterations`, 
           `inGeneral`.`writeDailyStatesFile`, 
           `inGeneral`.`dailyStatesFileName`, 
           `inGeneral`.`saveDailyEvents`, 
           `inGeneral`.`saveDailyExposures`  
    from `inGeneral`;


drop table `inGeneral`; 


-- `inGeneral` : Table of inGeneral
-- 	`inGeneralID` : A primary key for the single record stored in this table.  This value is always "NAADSMXXXX".
-- 	`scenarioDescr` : The description of the scenario.
-- 	`iterations` : The number of iterations of this scenario that should be run.
-- 	`days` : The number of days that iterations of this scenario should run, if the command Run->Start and run until specified day... is used.
-- 	`simStopReason` : The criterion used to end each iteration.  This may be that the specified number of days has passed, the first detection has occurred, or the outbreak has ended.
-- 	`includeContactSpread` : Indicates whether disease spread by direct or indirect contact is used in the scenario.
-- 	`includeAirborneSpread` : Indicates whether airborne spread is used in the model.
-- 	`useAirborneExponentialDecay` : Indicates whether exponential decay (TRUE) or linear decay (FALSE) is used with airborne spread.
-- 	`includeCosts` : Indicates whether direct costs should be tracked in the model.
-- 	`useFixedRandomSeed` : Indicates whether a specified seed value for the random number generator should be used.
-- 	`randomSeed` : The specified seed value for the random number generator.
-- 	`saveAllDailyOutputs` : Indicates whether daily outputs should be stored for every iteration.
-- 	`saveDailyOutputsForIterations` : The number of iterations for which daily outputs should be stored.  The minimum value is 3.
-- 	`writeDailyStatesFile` : Indicates whether a plain text file with the state of each unit on each day of each iteration should be written.
-- 	`dailyStatesFileName` : The file name of the plain text file described above.
-- 	`saveDailyEvents` : Indicates whether all events should be recorded in the scenario database.
-- 	`saveDailyExposures` : Indicates whether all exposures should be recorded in the scenario database.  
create table `inGeneral` ( 
	`inGeneralID` VARCHAR(10),
	`scenarioDescr` LONGTEXT,
	`iterations` INTEGER,
	`days` INTEGER,
	`simStopReason` VARCHAR(25),
	`includeContactSpread` BIT,
	`includeAirborneSpread` BIT,
	`useAirborneExponentialDecay` BIT,
	`includeCosts` BIT,
	`useFixedRandomSeed` BIT,
	`randomSeed` INTEGER,
	`saveAllDailyOutputs` BIT,
	`saveDailyOutputsForIterations` INTEGER,
	`writeDailyStatesFile` BIT,
	`dailyStatesFileName` VARCHAR(255),
	`saveDailyEvents` BIT,
	`saveDailyExposures` BIT); 

insert into `inGeneral` (`inGeneralID`, `scenarioDescr`, `iterations`, `days`, `simStopReason`, `includeContactSpread`, `includeAirborneSpread`, `includeCosts`, `useFixedRandomSeed`, `randomSeed`, `saveAllDailyOutputs`, `saveDailyOutputsForIterations`, `writeDailyStatesFile`, `dailyStatesFileName`, `saveDailyEvents`, `saveDailyExposures`) 
    select `inGeneral_IM0`.`inGeneralID`, 
           `inGeneral_IM0`.`scenarioDescr`, 
           `inGeneral_IM0`.`iterations`, 
           `inGeneral_IM0`.`days`, 
           `inGeneral_IM0`.`simStopReason`, 
           `inGeneral_IM0`.`includeContactSpread`, 
           `inGeneral_IM0`.`includeAirborneSpread`, 
           `inGeneral_IM0`.`includeCosts`, 
           `inGeneral_IM0`.`useFixedRandomSeed`, 
           `inGeneral_IM0`.`randomSeed`, 
           `inGeneral_IM0`.`saveAllDailyOutputs`, 
           `inGeneral_IM0`.`saveDailyOutputsForIterations`, 
           `inGeneral_IM0`.`writeDailyStatesFile`, 
           `inGeneral_IM0`.`dailyStatesFileName`, 
           `inGeneral_IM0`.`saveDailyEvents`, 
           `inGeneral_IM0`.`saveDailyExposures`  
    from `inGeneral_IM0`;


drop table `inGeneral_IM0`; 


alter table `inGeneral`
	add constraint `inGeneral_PK` primary key (`inGeneralID`) ; 


create index `inGeneralID` on `inGeneral` (
	`inGeneralID` ASC); 


-- Restore foreign key constraints for existing tables
alter table `inProductionType`
	add constraint `FK1` foreign key (
		`disLatentPeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `FK2` foreign key (
		`disSubclinicalPeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `FK4` foreign key (
		`disImmunePeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK3` foreign key (
		`disClinicalPeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK5` foreign key (
		`detProbObsVsTimeClinicalRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK6` foreign key (
		`detProbReportVsFirstDetectionRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK7` foreign key (
		`vaccImmunePeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `dynHerd`
	add constraint `inProductionType_dynHerd_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `inProductionTypePair`
	add constraint `inProductionType_inProductionTypePairs_FK1` foreign key (
		`sourceProductionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `inProductionTypePair`
	add constraint `inProductionType_inProductionTypePairs_FK2` foreign key (
		`destProductionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `outDailyByProductionType`
	add constraint `inProductionType_outDailyByProductionType_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `outIterationByProductionType`
	add constraint `inProductionType_outIterationByProductionType_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `outEpidemicCurves`
	add constraint `inProductionType_outEpidemicCurves_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `outIterationCosts`
	add constraint `inProductionType_outIterationCosts_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 


-- This is the end of the Microsoft Visual Studio generated SQL DDL script.
