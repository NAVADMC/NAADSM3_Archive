--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : C:\Documents and Settings\apreeves\My Documents\NAADSM\DatabaseSchemas\DBSchema3_1_8.vsd.
--    Time Created: March 23, 2007 2:42 PM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : naadsm-3_1_x
--    Connected server      : ACCESS
--    Connected database    : C:\DOCUMENTS AND SETTINGS\APREEVES\My Documents\NAADSM\DatabaseSchemas\naadsm3_1_x.mdb



-- Update existing table `inZoneProductionTypePair`.
create table `inZoneProductionTypePair_IM0` ( 
	`zoneID` INTEGER,
	`productionTypeID` INTEGER,
	`useDirectMovementControl` BIT,
	`zoneDirectMovementRelID` INTEGER,
	`useIndirectMovementControl` BIT,
	`zoneIndirectMovementRelID` INTEGER,
	`useDetectionMultiplier` BIT,
	`zoneDetectionMultiplier` DOUBLE); 

insert into `inZoneProductionTypePair_IM0` (`zoneID`, `productionTypeID`, `useDirectMovementControl`, `zoneDirectMovementRelID`, `useIndirectMovementControl`, `zoneIndirectMovementRelID`, `useDetectionMultiplier`, `zoneDetectionMultiplier`) 
    select `inZoneProductionTypePair`.`zoneID`, 
           `inZoneProductionTypePair`.`productionTypeID`, 
           `inZoneProductionTypePair`.`useDirectMovementControl`, 
           `inZoneProductionTypePair`.`zoneDirectMovementRelID`, 
           `inZoneProductionTypePair`.`useIndirectMovementControl`, 
           `inZoneProductionTypePair`.`zoneIndirectMovementRelID`, 
           `inZoneProductionTypePair`.`useDetectionMultiplier`, 
           `inZoneProductionTypePair`.`zoneDetectionMultiplier`  
    from `inZoneProductionTypePair`;


alter table `inZoneProductionTypePair`
	drop constraint `inChart_inZoneProductionTypePair_FK1`;


alter table `inZoneProductionTypePair`
	drop constraint `inChart_inZoneProductionTypePair_FK2`;


alter table `inZoneProductionTypePair`
	drop constraint `inProductionType_inZoneProductionTypePair_FK1`;


alter table `inZoneProductionTypePair`
	drop constraint `inSurveillanceZone_inZoneProductionTypePair_FK1`;


drop table `inZoneProductionTypePair`; 


-- `inZoneProductionTypePair` : Table of inZoneProductionTypePair
-- 	`zoneID` : zoneID identifies inZoneProductionTypePair
-- 	`productionTypeID` : productionTypeID partly identifies inZoneProductionTypePair
-- 	`useDirectMovementControl` : useDirectMovementControl is of inZoneProductionTypePair
-- 	`zoneDirectMovementRelID` : zoneDirectMovementRelID is of inZoneProductionTypePair
-- 	`useIndirectMovementControl` : useIndirectMovementControl is of inZoneProductionTypePair
-- 	`zoneIndirectMovementRelID` : zoneIndirectMovementRelID is of inZoneProductionTypePair
-- 	`useDetectionMultiplier` : useDetectionMultiplier is of inZoneProductionTypePair
-- 	`zoneDetectionMultiplier` : zoneDetectionMultiplier is of inZoneProductionTypePair
-- 	`costSurvPerAnimalDay` : costSurvPerAnimalDay is of inZoneProductionTypePair  
create table `inZoneProductionTypePair` ( 
	`zoneID` INTEGER,
	`productionTypeID` INTEGER,
	`useDirectMovementControl` BIT,
	`zoneDirectMovementRelID` INTEGER,
	`useIndirectMovementControl` BIT,
	`zoneIndirectMovementRelID` INTEGER,
	`useDetectionMultiplier` BIT,
	`zoneDetectionMultiplier` DOUBLE,
	`costSurvPerAnimalDay` DOUBLE); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`inZoneProductionTypePair`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'inZoneProductionTypePair' :
-- 	`zoneID`
-- 	`productionTypeID`


insert into `inZoneProductionTypePair` (`zoneID`, `productionTypeID`, `useDirectMovementControl`, `zoneDirectMovementRelID`, `useIndirectMovementControl`, `zoneIndirectMovementRelID`, `useDetectionMultiplier`, `zoneDetectionMultiplier`) 
    select `inZoneProductionTypePair_IM0`.`zoneID`, 
           `inZoneProductionTypePair_IM0`.`productionTypeID`, 
           `inZoneProductionTypePair_IM0`.`useDirectMovementControl`, 
           `inZoneProductionTypePair_IM0`.`zoneDirectMovementRelID`, 
           `inZoneProductionTypePair_IM0`.`useIndirectMovementControl`, 
           `inZoneProductionTypePair_IM0`.`zoneIndirectMovementRelID`, 
           `inZoneProductionTypePair_IM0`.`useDetectionMultiplier`, 
           `inZoneProductionTypePair_IM0`.`zoneDetectionMultiplier`  
    from `inZoneProductionTypePair_IM0`;


drop table `inZoneProductionTypePair_IM0`; 


alter table `inZoneProductionTypePair`
	add constraint `inZoneProductionTypePair_PK` primary key (`zoneID`, `productionTypeID`) ; 


-- Update existing table `outEpidemicCurves`.
create table `outEpidemicCurves_IM0` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`productionTypeID` INTEGER,
	`infectedUnits` INTEGER,
	`infectedAnimals` INTEGER,
	`detectedUnits` INTEGER,
	`detectedAnimals` INTEGER); 

insert into `outEpidemicCurves_IM0` (`iteration`, `day`, `productionTypeID`, `infectedUnits`, `infectedAnimals`, `detectedUnits`, `detectedAnimals`) 
    select `outEpidemicCurves`.`iteration`, 
           `outEpidemicCurves`.`day`, 
           `outEpidemicCurves`.`productionTypeID`, 
           `outEpidemicCurves`.`infectedUnits`, 
           `outEpidemicCurves`.`infectedAnimals`, 
           `outEpidemicCurves`.`detectedUnits`, 
           `outEpidemicCurves`.`detectedAnimals`  
    from `outEpidemicCurves`;


alter table `outEpidemicCurves`
	drop constraint `inProductionType_outEpidemicCurves_FK1`;


drop table `outEpidemicCurves`; 


-- `outEpidemicCurves` : Table of outEpidemicCurves
-- 	`iteration` : The iteration during which the outputs in this record were generated.  The first iteration is iteration number 1.
-- 	`day` : The day within the iteration on which these outputs were generated.  The first day of an iteration is day number 1.
-- 	`productionTypeID` : The ID number of the production type to which the outputs in this record apply.  This field references inProductionType.productionTypeID.
-- 	`infectedUnits` : The number of units of the specified production type infected by any mechanism on the specified day in the specified iteration.  Used to generate an actual epidemic curve.
-- 	`infectedAnimals` : Total number of animals in units described immediately above.
-- 	`detectedUnits` : The number of clinically ill units of the specified production type detected by any mechanism on the specified day in the specified iteration.  Used to generate an apparent epidemic curve.
-- 	`detectedAnimals` : Total number of animals in units described immediately above.
-- 	`infectiousUnits` : infectiousUnits is of outEpidemicCurves
-- 	`apparentInfectiousUnits` : apparentInfectiousUnits is of outEpidemicCurves  
create table `outEpidemicCurves` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`productionTypeID` INTEGER,
	`infectedUnits` INTEGER,
	`infectedAnimals` INTEGER,
	`detectedUnits` INTEGER,
	`detectedAnimals` INTEGER,
	`infectiousUnits` INTEGER,
	`apparentInfectiousUnits` INTEGER); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outEpidemicCurves`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outEpidemicCurves' :
-- 	`iteration`
-- 	`day`
-- 	`productionTypeID`


insert into `outEpidemicCurves` (`iteration`, `day`, `productionTypeID`, `infectedUnits`, `infectedAnimals`, `detectedUnits`, `detectedAnimals`) 
    select `outEpidemicCurves_IM0`.`iteration`, 
           `outEpidemicCurves_IM0`.`day`, 
           `outEpidemicCurves_IM0`.`productionTypeID`, 
           `outEpidemicCurves_IM0`.`infectedUnits`, 
           `outEpidemicCurves_IM0`.`infectedAnimals`, 
           `outEpidemicCurves_IM0`.`detectedUnits`, 
           `outEpidemicCurves_IM0`.`detectedAnimals`  
    from `outEpidemicCurves_IM0`;


drop table `outEpidemicCurves_IM0`; 


alter table `outEpidemicCurves`
	add constraint `outEpidemicCurves_PK` primary key (`iteration`, `day`, `productionTypeID`) ; 


-- Update existing table `inChart`.
create table `inChart_IM0` ( 
	`chartID` COUNTER,
	`fieldName` VARCHAR(50),
	`chartName` VARCHAR(150),
	`isPdf` BIT,
	`chartType` VARCHAR(20),
	`mean` DOUBLE,
	`stddev` DOUBLE,
	`min` DOUBLE,
	`mode` DOUBLE,
	`max` DOUBLE,
	`alpha` DOUBLE,
	`alpha2` DOUBLE,
	`beta` DOUBLE,
	`location` DOUBLE,
	`scale` DOUBLE,
	`shape` DOUBLE,
	`xAxisUnits` VARCHAR(50),
	`yAxisUnits` VARCHAR(50)); 

insert into `inChart_IM0` ( `chartID`, `fieldName`, `chartName`, `isPdf`, `chartType`, `mean`, `stddev`, `min`, `mode`, `max`, `alpha`, `alpha2`, `beta`, `location`, `scale`, `shape`, `xAxisUnits`, `yAxisUnits`) 
    select `inChart`.`chartID`,
    			 `inChart`.`fieldName`, 
           `inChart`.`chartName`, 
           `inChart`.`isPdf`, 
           `inChart`.`chartType`, 
           `inChart`.`mean`, 
           `inChart`.`stddev`, 
           `inChart`.`min`, 
           `inChart`.`mode`, 
           `inChart`.`max`, 
           `inChart`.`alpha`, 
           `inChart`.`alpha2`, 
           `inChart`.`beta`, 
           `inChart`.`location`, 
           `inChart`.`scale`, 
           `inChart`.`shape`, 
           `inChart`.`xAxisUnits`, 
           `inChart`.`yAxisUnits`  
    from `inChart`;


alter table `inChartDetail`
	drop constraint `inChart_inChartDetail_FK1`;


alter table `inControlsGlobal`
	drop constraint `inChart_inControlsGlobal_FK1`;


alter table `inControlsGlobal`
	drop constraint `inChart_inControlsGlobal_FK2`;


alter table `inDiseaseSpread`
	drop constraint `inChart_inDiseaseSpread_FK3`;


alter table `inDiseaseSpread`
	drop constraint `inChart_inProductionTypePair_FK1`;


alter table `inDiseaseSpread`
	drop constraint `inChart_inProductionTypePair_FK3`;


alter table `inProductionType`
	drop constraint `FK1`;


alter table `inProductionType`
	drop constraint `FK2`;


alter table `inProductionType`
	drop constraint `FK4`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK3`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK5`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK6`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK7`;


alter table `inProductionType`
	drop constraint `inChart_inProductionType_FK8`;


drop table `inChart`; 


-- `inChart` : Table of inChart
-- 	`chartID` : A unique ID for each function (pdf or relational function) defined for the scenario.
-- 	`fieldName` : Indicates the parameter (e.g. "disease latent period" or "movement effects over time") to which the function corresponds
-- 	`chartName` : Unique name assigned to each function.
-- 	`isPdf` : True if the function is a probability density function, false if a relational function.
-- 	`chartType` : For pdfs, identifies the type of function: see Appendix D.
-- 	`mean` : The mean for pdf types Gaussian, Lognormal, and Exponential.
-- 	`stddev` : The standard deviation for pdf types Gaussian and Lognormal. 
-- 	`min` : The minimum value for pdf types Uniform, Triangular, Beta, and BetaPERT. 
-- 	`mode` : The mode for pdf types Point, Triangular and BetaPERT. 
-- 	`max` : The maximum value for pdf types Uniform, Triangular, Beta and BetaPERT.
-- 	`alpha` : The alpha parameter for pdf types Gamma, Weibull, and Pearson 5, or the or alpha1 parameter for Beta pdfs.
-- 	`alpha2` : The alpha2 parameter for Beta pdfs.
-- 	`beta` : The beta parameter for pdf types Gamma, Weibull, and Pearson 5. 
-- 	`location` : The location parameter for pdf types Logistic and Loglogistic. 
-- 	`scale` : The scale parameter for pdf types Logistic and Loglogistic.
-- 	`shape` : The shape parameter for Loglogistic pdfs.
-- 	`xAxisUnits` : Specifies the units of the x axis for pdfs and rels.
-- 	`yAxisUnits` : Specifies the units of the y axis for rel functions.
-- 	`notes` : notes is of inChart  
create table `inChart` ( 
	`chartID` COUNTER,
	`fieldName` VARCHAR(50),
	`chartName` VARCHAR(150),
	`isPdf` BIT,
	`chartType` VARCHAR(20),
	`mean` DOUBLE,
	`stddev` DOUBLE,
	`min` DOUBLE,
	`mode` DOUBLE,
	`max` DOUBLE,
	`alpha` DOUBLE,
	`alpha2` DOUBLE,
	`beta` DOUBLE,
	`location` DOUBLE,
	`scale` DOUBLE,
	`shape` DOUBLE,
	`xAxisUnits` VARCHAR(50),
	`yAxisUnits` VARCHAR(50),
	`notes` LONGTEXT); 

insert into `inChart` (`chartID`, `fieldName`, `chartName`, `isPdf`, `chartType`, `mean`, `stddev`, `min`, `mode`, `max`, `alpha`, `alpha2`, `beta`, `location`, `scale`, `shape`, `xAxisUnits`, `yAxisUnits`) 
    select `inChart_IM0`.`chartID`,
           `inChart_IM0`.`fieldName`, 
           `inChart_IM0`.`chartName`, 
           `inChart_IM0`.`isPdf`, 
           `inChart_IM0`.`chartType`, 
           `inChart_IM0`.`mean`, 
           `inChart_IM0`.`stddev`, 
           `inChart_IM0`.`min`, 
           `inChart_IM0`.`mode`, 
           `inChart_IM0`.`max`, 
           `inChart_IM0`.`alpha`, 
           `inChart_IM0`.`alpha2`, 
           `inChart_IM0`.`beta`, 
           `inChart_IM0`.`location`, 
           `inChart_IM0`.`scale`, 
           `inChart_IM0`.`shape`, 
           `inChart_IM0`.`xAxisUnits`, 
           `inChart_IM0`.`yAxisUnits`  
    from `inChart_IM0`;


drop table `inChart_IM0`; 


alter table `inChart`
	add constraint `inChart_PK` primary key (`chartID`) ; 


create unique index `chartNameIndex` on `inChart` (
	`chartName`); 


-- Update existing table `dynHerd`.
alter table `dynHerd` add column `cumDetected` long;

-- Restore foreign key constraints for existing tables
alter table `inZoneProductionTypePair`
	add constraint `inChart_inZoneProductionTypePair_FK1` foreign key (
		`zoneDirectMovementRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inZoneProductionTypePair`
	add constraint `inChart_inZoneProductionTypePair_FK2` foreign key (
		`zoneIndirectMovementRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inZoneProductionTypePair`
	add constraint `inProductionType_inZoneProductionTypePair_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `inZoneProductionTypePair`
	add constraint `inSurveillanceZone_inZoneProductionTypePair_FK1` foreign key (
		`zoneID`)
	 references `inZone` (
		`zoneID`); 

alter table `outEpidemicCurves`
	add constraint `inProductionType_outEpidemicCurves_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `inChartDetail`
	add constraint `inChart_inChartDetail_FK1` foreign key (
		`chartID`)
	 references `inChart` (
		`chartID`); 

alter table `inControlsGlobal`
	add constraint `inChart_inControlsGlobal_FK1` foreign key (
		`destrCapacityRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inControlsGlobal`
	add constraint `inChart_inControlsGlobal_FK2` foreign key (
		`vaccCapacityRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inDiseaseSpread`
	add constraint `inChart_inDiseaseSpread_FK3` foreign key (
		`transportDelayPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inDiseaseSpread`
	add constraint `inChart_inProductionTypePair_FK1` foreign key (
		`distancePdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inDiseaseSpread`
	add constraint `inChart_inProductionTypePair_FK3` foreign key (
		`movementControlRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `FK1` foreign key (
		`disLatentPeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `FK2` foreign key (
		`disSubclinicalPeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `FK4` foreign key (
		`disImmunePeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK3` foreign key (
		`disClinicalPeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK5` foreign key (
		`detProbObsVsTimeClinicalRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK6` foreign key (
		`detProbReportVsFirstDetectionRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK7` foreign key (
		`vaccImmunePeriodPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionType`
	add constraint `inChart_inProductionType_FK8` foreign key (
		`disPrevalenceRelID`)
	 references `inChart` (
		`chartID`); 

-- This is the end of the Microsoft Visual Studio generated SQL DDL script.
