--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : E:\SpreadModel\_Databases\DBSchema3_0_76_3-2.vsd.
--    Time Created: February 09, 2006 5:16 PM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : NADTemplate3_0_50
--    Connected server      : ACCESS
--    Connected database    : E:\SPREADMODEL\_Databases\template-3_0_50.mdb



-- Update existing table `outDailyEvents`.
create table `outDailyEvents_IM0` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`event` INTEGER,
	`herdID` INTEGER,
	`eventCode` CHAR(1),
	`newStateCode` CHAR(1),
	`traceSuccess` BIT); 

insert into `outDailyEvents_IM0` (`iteration`, `day`, `event`, `herdID`, `eventCode`, `newStateCode`, `traceSuccess`) 
    select `outDailyEvents`.`iteration`, 
           `outDailyEvents`.`day`, 
           `outDailyEvents`.`event`, 
           `outDailyEvents`.`herdID`, 
           `outDailyEvents`.`eventCode`, 
           `outDailyEvents`.`newStateCode`, 
           `outDailyEvents`.`traceSuccess`  
    from `outDailyEvents`;


alter table `outDailyEvents`
	drop constraint `dynHerd_outDailyEvents_FK1`;


drop table `outDailyEvents`; 


-- `outDailyEvents` : Table of outDailyEvents
-- 	`iteration` : iteration partly identifies outDailyEvents
-- 	`day` : day identifies outDailyEvents
-- 	`event` : event partly identifies outDailyEvents
-- 	`herdID` : herdID partly identifies outDailyEvents
-- 	`eventCode` : eventCode partly identifies outDailyEvents
-- 	`newStateCode` : newStateCode is of outDailyEvents
-- 	`traceSuccess` : traceSuccess is of outDailyEvents  
create table `outDailyEvents` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`event` INTEGER,
	`herdID` INTEGER,
	`eventCode` CHAR(1),
	`newStateCode` CHAR(1),
	`traceSuccess` BIT); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outDailyEvents`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outDailyEvents' :
-- 	`iteration`
-- 	`day`
-- 	`event`
-- 	`herdID`
-- 	`eventCode`


update `outDailyEvents_IM0` set `eventCode` = '1' where `eventCode` is null;

insert into `outDailyEvents` (`iteration`, `day`, `event`, `herdID`, `eventCode`, `newStateCode`, `traceSuccess`) 
    select `outDailyEvents_IM0`.`iteration`, 
           `outDailyEvents_IM0`.`day`, 
           `outDailyEvents_IM0`.`event`, 
           `outDailyEvents_IM0`.`herdID`, 
           `outDailyEvents_IM0`.`eventCode`, 
           `outDailyEvents_IM0`.`newStateCode`, 
           `outDailyEvents_IM0`.`traceSuccess`  
    from `outDailyEvents_IM0`;


drop table `outDailyEvents_IM0`; 


alter table `outDailyEvents`
	add constraint `outDailyEvents_PK` primary key (`day`, `iteration`, `event`) ; 


-- Update existing table `outDailyExposures`.
create table `outDailyExposures_IM0` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`exposure` INTEGER,
	`exposedHerdID` INTEGER,
	`exposingHerdID` INTEGER,
	`spreadMethodCode` CHAR(1),
	`success` BIT); 

insert into `outDailyExposures_IM0` (`iteration`, `day`, `exposure`, `exposedHerdID`, `exposingHerdID`, `spreadMethodCode`, `success`) 
    select `outDailyExposures`.`iteration`, 
           `outDailyExposures`.`day`, 
           `outDailyExposures`.`exposure`, 
           `outDailyExposures`.`exposedHerdID`, 
           `outDailyExposures`.`exposingHerdID`, 
           `outDailyExposures`.`spreadMethodCode`, 
           `outDailyExposures`.`success`  
    from `outDailyExposures`;


alter table `outDailyExposures`
	drop constraint `dynHerd_outDailyExposures_FK1`;


alter table `outDailyExposures`
	drop constraint `dynHerd_outDailyExposures_FK2`;


drop table `outDailyExposures`; 


-- `outDailyExposures` : Table of outDailyExposures
-- 	`exposingHerdStatusCode` : exposingHerdStatusCode partly identifies outDailyExposures
-- 	`exposedHerdStatusCode` : exposedHerdStatusCode partly identifies outDailyExposures  
create table `outDailyExposures` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`exposure` INTEGER,
	`exposedHerdID` INTEGER,
	`exposingHerdID` INTEGER,
	`spreadMethodCode` CHAR(1),
	`success` BIT,
	`exposingHerdStatusCode` CHAR(1),
	`exposedHerdStatusCode` CHAR(1)); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outDailyExposures`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outDailyExposures' :
-- 	`iteration`
-- 	`day`
-- 	`exposure`
-- 	`exposedHerdID`
-- 	`exposingHerdID`
-- 	`spreadMethodCode`
-- 	`exposingHerdStatusCode`
-- 	`exposedHerdStatusCode`


update `outDailyExposures_IM0` set `spreadMethodCode` = '1' where `spreadMethodCode` is null;

insert into `outDailyExposures` (`iteration`, `day`, `exposure`, `exposedHerdID`, `exposingHerdID`, `spreadMethodCode`, `success`, `exposingHerdStatusCode`, `exposedHerdStatusCode`) 
    select `outDailyExposures_IM0`.`iteration`, 
           `outDailyExposures_IM0`.`day`, 
           `outDailyExposures_IM0`.`exposure`, 
           `outDailyExposures_IM0`.`exposedHerdID`, 
           `outDailyExposures_IM0`.`exposingHerdID`, 
           `outDailyExposures_IM0`.`spreadMethodCode`, 
           `outDailyExposures_IM0`.`success`, 
           '1',
           '1' 
    from `outDailyExposures_IM0`;


drop table `outDailyExposures_IM0`; 


alter table `outDailyExposures`
	add constraint `outDailyExposures_PK` primary key (`day`, `exposure`, `iteration`) ; 


-- Update existing table `inDiseaseSpread`.
create table `inDiseaseSpread_IM0` ( 
	`spreadID` COUNTER,
	`spreadMethodCode` CHAR(1),
	`latentCanInfect` BIT,
	`subclinicalCanInfect` BIT,
	`meanContactRate` DOUBLE,
	`useFixedContactRate` BIT,
	`fixedContactRate` INTEGER,
	`infectionProbability` DOUBLE,
	`distancePdfID` INTEGER,
	`movementControlRelID` INTEGER,
	`transportDelayPdfID` INTEGER,
	`probAirborneSpread1km` DOUBLE,
	`maxDistAirborneSpread` DOUBLE,
	`windDirectionStart` INTEGER,
	`windDirectionEnd` INTEGER); 

insert into `inDiseaseSpread_IM0` ( `spreadMethodCode`, `latentCanInfect`, `subclinicalCanInfect`, `meanContactRate`, `useFixedContactRate`, `fixedContactRate`, `infectionProbability`, `distancePdfID`, `movementControlRelID`, `transportDelayPdfID`, `probAirborneSpread1km`, `maxDistAirborneSpread`, `windDirectionStart`, `windDirectionEnd`) 
    select `inDiseaseSpread`.`spreadMethodCode`, 
           `inDiseaseSpread`.`latentCanInfect`, 
           `inDiseaseSpread`.`subclinicalCanInfect`, 
           `inDiseaseSpread`.`meanContactRate`, 
           `inDiseaseSpread`.`useFixedContactRate`, 
           `inDiseaseSpread`.`fixedContactRate`, 
           `inDiseaseSpread`.`infectionProbability`, 
           `inDiseaseSpread`.`distancePdfID`, 
           `inDiseaseSpread`.`movementControlRelID`, 
           `inDiseaseSpread`.`transportDelayPdfID`, 
           `inDiseaseSpread`.`probAirborneSpread1km`, 
           `inDiseaseSpread`.`maxDistAirborneSpread`, 
           `inDiseaseSpread`.`windDirectionStart`, 
           `inDiseaseSpread`.`windDirectionEnd`  
    from `inDiseaseSpread`;


alter table `inProductionTypePair`
	drop constraint `inDiseaseSpread_inProductionTypePairs_FK1`;


alter table `inProductionTypePair`
	drop constraint `inDiseaseSpread_inProductionTypePairs_FK2`;


alter table `inProductionTypePair`
	drop constraint `inDiseaseSpread_inProductionTypePairs_FK3`;


alter table `inDiseaseSpread`
	drop constraint `inChart_inDiseaseSpread_FK3`;


alter table `inDiseaseSpread`
	drop constraint `inChart_inProductionTypePair_FK1`;


alter table `inDiseaseSpread`
	drop constraint `inChart_inProductionTypePair_FK3`;


drop table `inDiseaseSpread`; 


-- `inDiseaseSpread` : Table of inDiseaseSpread
-- 	`useFixedContactRate` : useFixedContactRate is of inDiseaseSpread
-- 	`fixedContactRate` : fixedContactRate is of inDiseaseSpread  
create table `inDiseaseSpread` ( 
	`spreadID` COUNTER,
	`spreadMethodCode` CHAR(1),
	`latentCanInfect` BIT,
	`subclinicalCanInfect` BIT,
	`meanContactRate` DOUBLE,
	`useFixedContactRate` BIT,
	`fixedContactRate` INTEGER,
	`infectionProbability` DOUBLE,
	`distancePdfID` INTEGER,
	`movementControlRelID` INTEGER,
	`transportDelayPdfID` INTEGER,
	`probAirborneSpread1km` DOUBLE,
	`maxDistAirborneSpread` DOUBLE,
	`windDirectionStart` INTEGER,
	`windDirectionEnd` INTEGER); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`inDiseaseSpread`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'inDiseaseSpread' :
-- 	`spreadMethodCode`


update `inDiseaseSpread_IM0` set `spreadMethodCode` = '1' where `spreadMethodCode` is null;

insert into `inDiseaseSpread` (`spreadMethodCode`, `latentCanInfect`, `subclinicalCanInfect`, `meanContactRate`, `useFixedContactRate`, `fixedContactRate`, `infectionProbability`, `distancePdfID`, `movementControlRelID`, `transportDelayPdfID`, `probAirborneSpread1km`, `maxDistAirborneSpread`, `windDirectionStart`, `windDirectionEnd`) 
    select `inDiseaseSpread_IM0`.`spreadMethodCode`, 
           `inDiseaseSpread_IM0`.`latentCanInfect`, 
           `inDiseaseSpread_IM0`.`subclinicalCanInfect`, 
           `inDiseaseSpread_IM0`.`meanContactRate`, 
           `inDiseaseSpread_IM0`.`useFixedContactRate`, 
           `inDiseaseSpread_IM0`.`fixedContactRate`, 
           `inDiseaseSpread_IM0`.`infectionProbability`, 
           `inDiseaseSpread_IM0`.`distancePdfID`, 
           `inDiseaseSpread_IM0`.`movementControlRelID`, 
           `inDiseaseSpread_IM0`.`transportDelayPdfID`, 
           `inDiseaseSpread_IM0`.`probAirborneSpread1km`, 
           `inDiseaseSpread_IM0`.`maxDistAirborneSpread`, 
           `inDiseaseSpread_IM0`.`windDirectionStart`, 
           `inDiseaseSpread_IM0`.`windDirectionEnd`  
    from `inDiseaseSpread_IM0`;


drop table `inDiseaseSpread_IM0`; 


alter table `inDiseaseSpread`
	add constraint `inProductionTypePair_PK` primary key (`spreadID`) ; 


-- Update existing table `dynHerd`.
create table `dynHerd_IM0` ( 
	`herdID` COUNTER,
	`productionTypeID` INTEGER,
	`latitude` DOUBLE,
	`longitude` DOUBLE,
	`initialStateCode` CHAR(1),
	`daysLeftInInitialState` INTEGER,
	`initialSize` INTEGER,
	`finalStateCode` CHAR(1),
	`finalApparentStateCode` CHAR(1),
	`cumInfected` INTEGER,
	`cumDestroyed` INTEGER,
	`cumVaccinated` INTEGER); 

insert into `dynHerd_IM0` ( `productionTypeID`, `latitude`, `longitude`, `initialStateCode`, `daysLeftInInitialState`, `initialSize`, `finalStateCode`, `finalApparentStateCode`, `cumInfected`, `cumDestroyed`, `cumVaccinated`) 
    select `dynHerd`.`productionTypeID`, 
           `dynHerd`.`latitude`, 
           `dynHerd`.`longitude`, 
           `dynHerd`.`initialStateCode`, 
           `dynHerd`.`daysLeftInInitialState`, 
           `dynHerd`.`initialSize`, 
           `dynHerd`.`finalStateCode`, 
           `dynHerd`.`finalApparentStateCode`, 
           `dynHerd`.`cumInfected`, 
           `dynHerd`.`cumDestroyed`, 
           `dynHerd`.`cumVaccinated`  
    from `dynHerd`;


alter table `dynHerd`
	drop constraint `inProductionType_dynHerd_FK1`;


drop table `dynHerd`; 


-- `dynHerd` : Table of dynHerd  
create table `dynHerd` ( 
	`herdID` COUNTER,
	`productionTypeID` INTEGER,
	`latitude` DOUBLE,
	`longitude` DOUBLE,
	`initialStateCode` CHAR(1),
	`daysLeftInInitialState` INTEGER,
	`initialSize` INTEGER,
	`finalStateCode` CHAR(1),
	`finalApparentStateCode` CHAR(1),
	`cumInfected` INTEGER,
	`cumDestroyed` INTEGER,
	`cumVaccinated` INTEGER); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`dynHerd`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'dynHerd' :
-- 	`productionTypeID`
-- 	`initialStateCode`
-- 	`finalStateCode`
-- 	`finalApparentStateCode`


update `dynHerd_IM0` set `initialStateCode` = '1' where `initialStateCode` is null;

update `dynHerd_IM0` set `finalStateCode` = '1' where `finalStateCode` is null;

update `dynHerd_IM0` set `finalApparentStateCode` = '1' where `finalApparentStateCode` is null;

insert into `dynHerd` (`productionTypeID`, `latitude`, `longitude`, `initialStateCode`, `daysLeftInInitialState`, `initialSize`, `finalStateCode`, `finalApparentStateCode`, `cumInfected`, `cumDestroyed`, `cumVaccinated`) 
    select `dynHerd_IM0`.`productionTypeID`, 
           `dynHerd_IM0`.`latitude`, 
           `dynHerd_IM0`.`longitude`, 
           `dynHerd_IM0`.`initialStateCode`, 
           `dynHerd_IM0`.`daysLeftInInitialState`, 
           `dynHerd_IM0`.`initialSize`, 
           `dynHerd_IM0`.`finalStateCode`, 
           `dynHerd_IM0`.`finalApparentStateCode`, 
           `dynHerd_IM0`.`cumInfected`, 
           `dynHerd_IM0`.`cumDestroyed`, 
           `dynHerd_IM0`.`cumVaccinated`  
    from `dynHerd_IM0`;


drop table `dynHerd_IM0`; 


alter table `dynHerd`
	add constraint `dynHerd_PK` primary key (`herdID`) ; 


-- Create new table `readEventCodes`.
-- `readEventCodes` : Table of readEventCodes
-- 	`eventCode` : eventCode identifies readEventCodes
-- 	`definition` : definition is of readEventCodes  
create table `readEventCodes` ( 
	`eventCode` CHAR(1),
	`definition` VARCHAR(255), constraint `readEventCodes_PK` primary key (`eventCode`) ); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`readEventCodes`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'readEventCodes' :
-- 	`eventCode`


-- Create new table `readStatusCodes`.
-- `readStatusCodes` : Table of readStatusCodes
-- 	`statusCode` : statusCode identifies readStatusCodes
-- 	`definition` : definition is of readStatusCodes  
create table `readStatusCodes` ( 
	`statusCode` CHAR(1),
	`definition` VARCHAR(255), constraint `readStatusCodes_PK` primary key (`statusCode`) ); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`readStatusCodes`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'readStatusCodes' :
-- 	`statusCode`


-- Create new table `readApparentStateCodes`.
-- `readApparentStateCodes` : Table of readApparentStateCodes
-- 	`apparentStateCode` : apparentStateCode identifies readApparentStateCodes
-- 	`definition` : definition is of readApparentStateCodes  
create table `readApparentStateCodes` ( 
	`apparentStateCode` CHAR(1),
	`definition` VARCHAR(255), constraint `readApparentStateCodes_PK` primary key (`apparentStateCode`) ); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`readApparentStateCodes`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'readApparentStateCodes' :
-- 	`apparentStateCode`


-- Create new table `readSpreadMethodCodes`.
-- `readSpreadMethodCodes` : Table of readSpreadMethodCodes
-- 	`spreadMethodCode` : spreadMethodCode identifies readSpreadMethodCodes
-- 	`definition` : definition is of readSpreadMethodCodes  
create table `readSpreadMethodCodes` ( 
	`spreadMethodCode` CHAR(1),
	`definition` VARCHAR(255), constraint `readSpreadMethodCodes_PK` primary key (`spreadMethodCode`) ); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`readSpreadMethodCodes`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'readSpreadMethodCodes' :
-- 	`spreadMethodCode`


-- Restore foreign key constraints for existing tables
alter table `outDailyEvents`
	add constraint `dynHerd_outDailyEvents_FK1` foreign key (
		`herdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyExposures`
	add constraint `dynHerd_outDailyExposures_FK1` foreign key (
		`exposedHerdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyExposures`
	add constraint `dynHerd_outDailyExposures_FK2` foreign key (
		`exposingHerdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `inDiseaseSpread`
	add constraint `inChart_inDiseaseSpread_FK3` foreign key (
		`transportDelayPdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inDiseaseSpread`
	add constraint `inChart_inProductionTypePair_FK1` foreign key (
		`distancePdfID`)
	 references `inChart` (
		`chartID`); 

alter table `inDiseaseSpread`
	add constraint `inChart_inProductionTypePair_FK3` foreign key (
		`movementControlRelID`)
	 references `inChart` (
		`chartID`); 

alter table `inProductionTypePair`
	add constraint `inDiseaseSpread_inProductionTypePairs_FK1` foreign key (
		`directContactSpreadID`)
	 references `inDiseaseSpread` (
		`spreadID`); 

alter table `inProductionTypePair`
	add constraint `inDiseaseSpread_inProductionTypePairs_FK2` foreign key (
		`indirectContactSpreadID`)
	 references `inDiseaseSpread` (
		`spreadID`); 

alter table `inProductionTypePair`
	add constraint `inDiseaseSpread_inProductionTypePairs_FK3` foreign key (
		`airborneContactSpreadID`)
	 references `inDiseaseSpread` (
		`spreadID`); 

alter table `dynHerd`
	add constraint `inProductionType_dynHerd_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

-- Add foreign key constraints to table `dynHerd`.
alter table `dynHerd`
	add constraint `readStatusCodes_dynHerd_FK1` foreign key (
		`initialStateCode`)
	 references `readStatusCodes` (
		`statusCode`); 

alter table `dynHerd`
	add constraint `readStatusCodes_dynHerd_FK2` foreign key (
		`finalStateCode`)
	 references `readStatusCodes` (
		`statusCode`); 

alter table `dynHerd`
	add constraint `readApparentStateCodes_dynHerd_FK1` foreign key (
		`finalApparentStateCode`)
	 references `readApparentStateCodes` (
		`apparentStateCode`); 

-- Add foreign key constraints to table `outDailyEvents`.
alter table `outDailyEvents`
	add constraint `readEventCodes_outDailyEvents_FK1` foreign key (
		`eventCode`)
	 references `readEventCodes` (
		`eventCode`); 

alter table `outDailyEvents`
	add constraint `readStatusCodes_outDailyEvents_FK1` foreign key (
		`newStateCode`)
	 references `readStatusCodes` (
		`statusCode`); 

-- Add foreign key constraints to table `inDiseaseSpread`.
alter table `inDiseaseSpread`
	add constraint `readSpreadMethodCodes_inDiseaseSpread_FK1` foreign key (
		`spreadMethodCode`)
	 references `readSpreadMethodCodes` (
		`spreadMethodCode`); 

-- Add foreign key constraints to table `outDailyExposures`.
alter table `outDailyExposures`
	add constraint `readStatusCodes_outDailyExposures_FK1` foreign key (
		`exposingHerdStatusCode`)
	 references `readStatusCodes` (
		`statusCode`); 

alter table `outDailyExposures`
	add constraint `readStatusCodes_outDailyExposures_FK2` foreign key (
		`exposedHerdStatusCode`)
	 references `readStatusCodes` (
		`statusCode`); 

alter table `outDailyExposures`
	add constraint `readSpreadMethodCodes_outDailyExposures_FK1` foreign key (
		`spreadMethodCode`)
	 references `readSpreadMethodCodes` (
		`spreadMethodCode`); 


-- This is the end of the Microsoft Visual Studio generated SQL DDL script.
